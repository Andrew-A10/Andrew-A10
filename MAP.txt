<html>
<style>
    a {
        color: wheat;
    }
</style>
    <head content="width=device-width, initial-slace=1.0">
        <meta charset="UTF-8"
        <meta name="viewport", content="width=device-width, initial-scale=1.0">
        <title>Snake</title>
    </head>
    <body>
        <link rel="stylesheet" href="snake.css">
        <script src="snake.js"></script>
        <h1>Snake</h1>
        <canvas id="board"></canvas><br>
        <div id="ScoreTextBox"></div><br>
        <button id="restartbutton" onclick="Restart()">Restart</button>
    </body>
<script>
var Score = 0;
//!board
var blockSize = 25;
var rows = 20;
var cols = 20;
var board;
var context;

//!snake
var snakeX;
var snakeY;

var velocityX = 0;
var velocityY = 0;

var snakeBody = [];
//!food
var foodX;
var foodY;

var gameOver = false;
window.onload = function() {
    board = document.getElementById("board");
    board.height = rows * blockSize;
    board.width = cols * blockSize;
    context = board.getContext("2d"); //used for drawing on board
    spawnPlayer();
    placeFood();
    document.addEventListener("keyup", changeDirection);
    setInterval(update, 1000/10); //100 ms
}
function Restart() {
    window.location.reload(true);
}
function update() {
    if (gameOver) {
        return;
    }
    
    //!board
    context.fillStyle="black";
    context.fillRect(0, 0, board.width, board.height);
    //!food
    context.fillStyle="red";
    context.fillRect(foodX, foodY, blockSize, blockSize);
    //!snake
    if (snakeX == foodX && snakeY == foodY) {
        snakeBody.push([foodX, foodY])
        Score = Score + 1;
        placeFood();
    }
    for (let i = snakeBody.length - 1; i > 0; i--) {
        snakeBody[i] = snakeBody[i-1];
    }
    if (snakeBody.length) {
        snakeBody[0] = [snakeX, snakeY];
    }
    context.fillStyle="lime";
    snakeX += velocityX * blockSize;
    snakeY += velocityY * blockSize;
    context.fillRect(snakeX, snakeY, blockSize, blockSize);
    for (let i = 0; i < snakeBody.length; i++) {
        context.fillRect(snakeBody[i][0], snakeBody[i][1], blockSize, blockSize);
    }



    //!game over conditions
    if (snakeX < 0 || snakeX > cols * blockSize - 1 || snakeY < 0 || snakeY > rows * blockSize - 1) {
        gameOver = true;
        alert("Game Over");
    }
    for (let i = 0; i < snakeBody.length; i++) {
        if (snakeX == snakeBody[i][0] && snakeY == snakeBody[i][1]) {
            gameOver = true;
            alert("Game Over");
        }
    }
    document.getElementById("ScoreTextBox").innerHTML = "Score: " + Score;
}

//!randomizing food and player spawns
function placeFood() {
    foodX = Math.floor(Math.random() * cols) * blockSize;
    foodY = Math.floor(Math.random() * cols) * blockSize;
}
function spawnPlayer() {
    snakeX = Math.floor(Math.random() * cols) * blockSize;
    snakeY = Math.floor(Math.random() * cols) * blockSize;
}

//!movement
function changeDirection(e) {
    if (e.code == "ArrowUp" && velocityY != 1) {
        velocityX = 0;
        velocityY = -1;
    }
    else if (e.code == "ArrowDown" && velocityY != -1) {
        velocityX = 0;
        velocityY = 1;
    }
    else if (e.code == "ArrowLeft" && velocityX != 1) {
        velocityX = -1;
        velocityY = 0;
    }
    else if (e.code == "ArrowRight" && velocityX != -1) {
        velocityX = 1;
        velocityY = 0;
    }
    else if (e.key == "w" && velocityY != 1) {
        velocityX = 0;
        velocityY = -1;
    }
    else if (e.key == "s" && velocityY != -1) {
        velocityX = 0;
        velocityY = 1;
    }
    else if (e.key == "a" && velocityX != 1) {
        velocityX = -1;
        velocityY = 0;
    }
    else if (e.key == "d" && velocityX != -1) {
        velocityX = 1;
        velocityY = 0;
    }
}
</script>
<style>
body {
    background: darkslategrey;
    text-align: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: wheat;
}

ul#Navigation .active {
    border-color: wheat;
    border-left-color: black;
    border-top-color: black;
    color: wheat;
    background-color: darkslategray;
}

button {
    background-color: wheat;
    color: darkslategrey;
    font-size: 16px;
    padding: 12px 24px;
    border: 2px solid darkslategrey;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: bold;
    text-transform: uppercase;
}

button:hover {
    background-color: darkslategrey;
    border-color: wheat;
    color: wheat;
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

button:active {
    background-color: wheat;
    color: darkslategrey;
    transform: scale(1);
    box-shadow: none;
}

button:focus {
    outline: none;
    border-color: wheat;
}
</style>
</html>